#!/usr/bin/env ruby -w

require 'multiruby'

ARGV << "help" if ARGV.empty?

Dir.chdir Multiruby.root_dir
Multiruby.setup_dirs(false)

ARGV.each do |spec|
  case spec
  when "-h", "--help", "help" then
    Multiruby.help
    exit 0
  when "list" then
    Multiruby.list
  when "build" then
    Multiruby.build_and_install
  when /rm:(.*)/ then
    Multiruby.rm $1
  when "clean" then
    Multiruby.clean
  when "update" then
    Multiruby.update
  when "update:rubygems" then
    Multiruby.update_rubygems
  when "rubygems:merge" then
    Multiruby.merge_rubygems
  when "mri:svn:current" then
    ARGV << "mri:svn:releases" << "mri:svn:branches" << "build"
  when "mri:svn:releases" then
    Multiruby::TAGS.each do |v|
      latest = Multiruby.mri_latest_tag v
      abort "Can't find tag #{v}" unless latest
      ARGV << "mri:svn:tag:#{latest}:mri_rel_#{v}"
    end
    ARGV << "build"
  when "mri:svn:branches" then
    Multiruby::BRANCHES.each do |v|
      ARGV << "mri:svn:branch:#{v}"
    end
    ARGV << "build"
  when /mri:svn:branch:(.*)/ then
    dir = ver = $1
    ver = "branches/ruby_#{ver}" unless ver == "trunk"

    Multiruby.svn_co "#{Multiruby::MRI_SVN}/#{ver}", "mri_#{dir}"
    ARGV << "build"
  when /mri:svn:tag:(.*):(.*)/ then
    ver, dir = $1, $2

    Multiruby.svn_co "#{Multiruby::MRI_SVN}/tags/#{ver}", dir
    ARGV << "build"
  when /mri:svn:tag:(.*)/ then
    ver = $1

    ARGV << "mri:svn:tag:#{ver}:#{ver}" << "build"
  when /mri:tar:(.*)/ then
    v = $1
    Multiruby.fetch_tar v
    ARGV << "build"
  when /rbx:ln:(.*)/ then
    Multiruby.rbx_ln $1
    ARGV << "build"
  when /rbx:git:current/ then
    Multiruby.git_clone "#{Multiruby::RBX_GIT}/code", "rubinius"
    ARGV << "build"
  when "the_usual" then # TODO: update #help
    Multiruby::TAGS.each do |v|
      ARGV << "mri:tar:#{v.gsub(/_/, '.')}"
    end
    ARGV << "build" << "update:rubygems"
    system "multigem install --no-ri --no-rdoc rake minitest ZenTest"
  when "tags" then
    p Multiruby.tags
  else
    warn "unknown spec #{spec}"
  end
end

